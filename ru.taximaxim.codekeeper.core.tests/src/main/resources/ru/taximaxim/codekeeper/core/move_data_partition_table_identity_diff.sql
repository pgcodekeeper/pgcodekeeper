SET search_path = pg_catalog;

ALTER TABLE public.measurement_3 RENAME TO measurement_3_randomly_generated_part;

ALTER TABLE public.measurement_2 RENAME TO measurement_2_randomly_generated_part;

ALTER TABLE public.measurement_1 RENAME TO measurement_1_randomly_generated_part;

ALTER TABLE public.measurement RENAME TO measurement_randomly_generated_part;

ALTER SEQUENCE public.measurement_city_id_seq RENAME TO measurement_city_id_seq_randomly_generated_part;

ALTER SEQUENCE public.measurement_country_id_seq RENAME TO measurement_country_id_seq_randomly_generated_part;

CREATE TABLE public.measurement (
	id bigint,
	country_id integer,
	city_id integer NOT NULL,
	logdate integer
)
PARTITION BY RANGE (logdate);

ALTER TABLE public.measurement ALTER COLUMN country_id ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME public.measurement_country_id_seq
	START WITH 1
	INCREMENT BY 1
	NO MAXVALUE
	NO MINVALUE
	CACHE 1
);

ALTER TABLE public.measurement ALTER COLUMN city_id ADD GENERATED ALWAYS AS IDENTITY (
	SEQUENCE NAME public.measurement_city_id_seq
	START WITH 1
	INCREMENT BY 1
	NO MAXVALUE
	NO MINVALUE
	CACHE 1
);

ALTER TABLE public.measurement OWNER TO khazieva_gr;

CREATE TABLE public.measurement_2 PARTITION OF public.measurement
FOR VALUES FROM (6) TO (10)
PARTITION BY RANGE (logdate);

ALTER TABLE public.measurement_2 OWNER TO khazieva_gr;

CREATE TABLE public.measurement_1 PARTITION OF public.measurement
FOR VALUES FROM (1) TO (4);

ALTER TABLE public.measurement_1 OWNER TO khazieva_gr;

CREATE TABLE public.measurement_3 PARTITION OF public.measurement_2
FOR VALUES FROM (7) TO (9);

ALTER TABLE public.measurement_3 OWNER TO khazieva_gr;

INSERT INTO public.measurement(id, country_id, city_id, logdate)
OVERRIDING SYSTEM VALUE
SELECT id, country_id, city_id, logdate FROM public.measurement_randomly_generated_part;

DO LANGUAGE plpgsql $_$
DECLARE restart_var bigint = (SELECT COALESCE(
    (SELECT nextval(pg_get_serial_sequence('public.measurement_randomly_generated_part', 'city_id'))),
    (SELECT MAX(city_id) + 1 FROM public.measurement),
    1));
BEGIN
    EXECUTE $$ ALTER TABLE public.measurement ALTER COLUMN city_id RESTART WITH $$ || restart_var || ';' ;
END
$_$;

DO LANGUAGE plpgsql $_$
DECLARE restart_var bigint = (SELECT COALESCE(
    (SELECT nextval(pg_get_serial_sequence('public.measurement_randomly_generated_part', 'country_id'))),
    (SELECT MAX(country_id) + 1 FROM public.measurement),
    1));
BEGIN
    EXECUTE $$ ALTER TABLE public.measurement ALTER COLUMN country_id RESTART WITH $$ || restart_var || ';' ;
END
$_$;

DROP TABLE public.measurement_3_randomly_generated_part;

DROP TABLE public.measurement_1_randomly_generated_part;

DROP TABLE public.measurement_2_randomly_generated_part;

DROP TABLE public.measurement_randomly_generated_part;
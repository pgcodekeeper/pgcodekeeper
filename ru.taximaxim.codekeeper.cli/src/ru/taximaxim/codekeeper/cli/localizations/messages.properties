
CliArgs_Help = show this help

CliArgs_Version = show version

CliArgs_add_transaction = wrap generated script with transaction statements

CliArgs_allow_danger_ddl = allows dangerous statements in safe-mode scripts

CliArgs_allowed_object = build the script using these object types only, hide statements of other objects

CliArgs_clear_lib_cache = clear library cache

CliArgs_comments_to_end = print comments at the end of the script

CliArgs_concurrently_mode = print CREATE INDEX with CONCURRENTLY option for PostgreSQL and WITH ONLINE = ON for MS SQL

CliArgs_db_type = specify database type for work: PG, MS, CH

CliArgs_drop_before_create = print DROP before CREATE statement

CliArgs_enable_function_bodies_dependencies = enable dependencies from bodies of functions and procedures to other functions or procedures

CliArgs_error_argument_null = Please specify argument %s

CliArgs_error_concurrently_mode_wrong_option = -C (--concurrently-mode) cannot be used with the option(s) -X (--add-transaction) for PostgreSQL.

CliArgs_error_different_types = Source (%s) and target (%s) are of different types, possibly missing --db-type parameter.

CliArgs_error_message_cannot_database_with_project = Cannot work with %s database as %s project.

CliArgs_error_run_on_non_jdbc = Option -R (--run-on) must specify JDBC connection string.

CliArgs_error_source_dest = Please specify both SOURCE and DEST.

CliArgs_error_source_non_db = Source must be a database.

CliArgs_error_source_null = Please specify SOURCE.

CliArgs_error_target_non_db = Script can be applied only to database.

CliArgs_error_wrong_db_type = {0} cannot be used with --db-type {1} option

CliArgs_error_wrong_mode = {0} cannot be used with --mode {1} option

CliArgs_generate_constraint_not_valid = print CONSTRAINT NOT VALID for no partitioned tables

CliArgs_generate_exist = print CREATE IF NOT EXISTS / DROP IF EXISTS

CliArgs_generate_exist_do_block = print creation of CONSTRAINT and IDENTITY in DO block (PG only)

CliArgs_graph = deprecated option. Use --mode GRAPH. Run in graph mode to show objects dependencies

CliArgs_graph_depth = depth of displayed dependencies in graph mode

CliArgs_graph_filter_object = show these object types, hide other objects types

CliArgs_graph_invert_filter = invert graph filter object types: hide objects specified by the filter

CliArgs_graph_name = name of start object in graph mode\nspecify multiple times to use several names

CliArgs_graph_reverse = reverse the direction of the graph to show objects on which the starting object depends

CliArgs_ignore_column_order = ignore differences in table column order

CliArgs_ignore_concurrent_modification = ignore concurrent modification errors of database objects

CliArgs_ignore_errors = do not stop on parse errors

CliArgs_ignore_list = use an ignore list to include/exclude objects from diff\nspecify multiple times to use several lists

CliArgs_ignore_schema = use an ignore schema list to include/exclude schemas at loading stage

CliArgs_in_charset = input charset

CliArgs_insert = deprecated option. Use --mode INSERT. Run in insert mode to collect data

CliArgs_insert_filter = value of WHERE expression for initial select in insert mode

CliArgs_insert_name = name of start object in data insert mode

CliArgs_keep_newlines = keep newline characters as is (don't convert to Unix newlines)

CliArgs_lib_safe_mode = exit with an error if a library object conflicts with other schema or library objects\notherwise, in case of conflicts objects loaded first have priority

CliArgs_list_charsets = show list of Java-supported charsets

CliArgs_migrate_data = migrate data when re-creating tables

CliArgs_mode = specify mode:\nDIFF - to compares the two sources and generates a migration script;\nPARSE - to save database schema as a directory hierarchy;\nGRAPH - to search for dependencies of an object;\nINSERT - to gathering data from the source database taking into account the FK dependencies;\nVERIFY - to check code style;

CliArgs_no_check_function_bodies = set check_function_bodies to false at the beginning of the script

CliArgs_no_privileges = ignore privileges and owners of database objects

CliArgs_out_charset = output charset

CliArgs_output = script output file or parser output directory

CliArgs_parse = deprecated option. Use --mode PARSE. Run in parser mode to save database schema as a directory hierarchy

CliArgs_post_script = POST script file path or directory with POST scripts\nnested directories are loaded recursively\nspecify multiple times to use several paths

CliArgs_pre_script = PRE script file path or directory with PRE scripts\nnested directories are loaded recursively\nspecify multiple times to use several paths

CliArgs_run_on = run generated script on the specified database

CliArgs_run_on_target = run generated script on the target database

CliArgs_safe_mode = do not generate scripts containing dangerous statements\nsee: --allow-danger-ddl

CliArgs_selected_only = build the script using 'selected' objects only, hide statements of other objects\nin CLI, selected means included by --allowed-object and ignore lists

CliArgs_show_error = print exception stacktrace

CliArgs_simplify_views = simple formatting for VIEWs when reading via JDBC (not recomended by PostgreSQL)

CliArgs_source = source of schema changes

CliArgs_src_lib = add library dependency to source\nspecify multiple times to use several libraries

CliArgs_src_lib_no_priv = add library dependency to source without privileges\nspecify multiple times to use several libraries

CliArgs_src_lib_xml = add xml with library dependencies to source\nspecify multiple times to use several library xml's

CliArgs_stop_not_allowed = exit with an error when --allowed-object hides a dependency statement from the script

CliArgs_target = destination for schema changes (diff mode only)

CliArgs_tgt_lib = add library dependency to destination\nspecify multiple times to use several libraries

CliArgs_tgt_lib_no_priv = add library dependency to destination without privileges\nspecify multiple times to use several libraries

CliArgs_tgt_lib_xml = add xml with library dependencies to target\nspecify multiple times to use several library xml's

CliArgs_time_zone = use this timezone when working with database, also add SET TIMEZONE statement to the script

CliArgs_update_project = update an existing project in parse mode

CliArgs_using_off = do not print USING expression for ALTER COLUMN TYPE

CliArgs_verify_rule_set = path to a file with a set of rules for code verification

CliArgs_verify_source = path to file or directory for code verification\nspecify multiple times to use several paths

DatabaseType_unsupported_type = Unsupported database type:

Main_cach_clear = Library cache cleared

Main_danger_statements = Script contains dangerous statements: {0}. Use --allow-danger-ddl to override.

Main_log_apply_migration_script = Apply migration script on target database

Main_log_build_graph_deps = Building graph dependencies

Main_log_contains_dangerous_statements = Migration script contains dangerous statements: {}

Main_log_create_script = Starting creating script

Main_log_finish_code_verify = Code verifying is finished

Main_log_run_insert_data = Running insert data script on target database

Main_log_running_error = Got error when application running

Main_log_start_code_verify = Start of the code verification process

Main_log_start_export_proj = Start to export project

Main_log_start_insert_data = Start generating insert data script

Main_log_start_update_proj = Start to update project

Main_log_succes_finish = Successfully completed

Main_show_stacktrace = Use -E to see exception stacktrace

PgDiffCli_log_lib_have_dupl = Library have duplicate

PgDiffCli_log_load_ignored_obj = Load ignored objects lists

PgDiffCli_log_load_ignored_schemas = Load ignored schemas lists

PgDiffCli_log_load_new_db = Load new database

PgDiffCli_log_load_new_db_lib = Load new database's libraries

PgDiffCli_log_load_new_db_overrides = Load new database's overrides

PgDiffCli_log_load_old_db = Load old database

PgDiffCli_log_load_old_db_lib = Load old database's libraries

PgDiffCli_log_load_old_db_overrides = Load old database's overrides

PgDiffCli_log_start_db_analyze = Start database analysis

UnknownDBFormat = Unknown DB format: {0}

UsageHelp = Usage\n${tab}pgcodekeeper-cli [option]... SOURCE DEST\n${tab}pgcodekeeper-cli -s SOURCE -t DEST [option]...\n${tab}pgcodekeeper-cli --mode PARSE -o OUTDIR [--update-project] [option]... SOURCE\n${tab}pgcodekeeper-cli --mode GRAPH [option]... SOURCE\n${tab}pgcodekeeper-cli --mode INSERT --insert-name <name> --insert-filter <filter> [option]... SOURCE\n${tab}pgcodekeeper-cli --mode VERIFY --verify-rule-set <path> --verify-source <path> [option]...\n\n{0}\n{1}\n\nLibrary load order\n${tab}Libraries are loaded in the following order:\n${tab}${tab}1. Libraries in specified XML lists.\n${tab}${tab}2. Explicitly specified libraries.\n${tab}${tab}3. Explicitly specified libraries without privileges.\n${tab}In each group order is defined by the given argument order. Within XMLs entry order is used.\n${tab}Objects loaded first in this sequence may override ones loaded later (if --lib-safe-mode is off).\n\nLive database connections\n${tab}Use JDBC connection URL to specify live databases\n${tab}${tab}PostgreSQL: https://jdbc.postgresql.org/documentation/head/connect.html\n${tab}${tab}MS SQL: https://docs.microsoft.com/sql/connect/jdbc/building-the-connection-url\n${tab}${tab}ClickHouse: https://clickhouse.com/docs/en/integrations/java#configuration

Utils_error_get_version = error: no OSGI running

Version = Version: {0}
